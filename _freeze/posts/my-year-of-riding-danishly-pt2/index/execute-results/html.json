{
  "hash": "bfaac28438c2348b266bf3ec50009a22",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"My Year of Riding Danishly pt 2\"\ndescription: \"Now with new residual plots and unique days ridden\"\nauthor: \"gregers kjerulf dubrow\"\ndate: '2024-04-25'\ncategories: [post, rstats, ggplot, regression, ols, bicycle, denmark]\nimage: \"commute_bike.jpg\"\ntoc: true\nlightbox: true\neditor: \n  mode: source\n---\n\n\n\n\n![My commute bike](commute_bike.jpg){fig-align=\"left\" width=\"60%\" fig-alt=\"blue bicycle in a bike parking area.\"}\n\nI was pleasantly surprised by the response to the [\"My Year of Riding Danishly\" post](https://www.gregdubrow.io/posts/my-year-of-riding-danishly/). It's by far the most viewed post, owing in part to being mentioned on the [R Weekly podcast](https://rweekly.fireside.fm/153). It's also resulted in some follow-on work. Not bad for being the product of being forced to stay home while recuperating from my bike accident and needing a big project to dive into.\n\nIn addition to the podcast mention, I presented the work at the [April 23rd Copenhagen R meetup](https://www.meetup.com/copenhagenr-user-group/events/300016965). I put together the slides in Quarto, my first time using it for presentation slides. It took a bit of time figuring out some custom CSS and in-line tags, but I was happy with the result. You can see the [html slides](https://greg-dubrow.github.io/copenhagenR-April2024-slides/copenhagenR-April2024-slides.html#/section) and the [raw .qmd file](https://github.com/greg-dubrow/copenhagenR-April2024-slides/blob/master/copenhagenR-April2024-slides.qmd) on my [github repo](https://github.com/greg-dubrow).\n\nIn the process of putting the slides together I decided I wanted to change how I presented the residuals and also to count and plot the number of unique days I rode in 2023. So let's do that.\n\nFirst, the new residuals. Originally I plotted actuals vs predicted, so not really showing the residuals. My approach here is to plot the residuals (actual minus predicted) against the actuals to check for heteroscedasticity (variance of errors not constant). The code and results for the regression models are [in the original post](https://www.gregdubrow.io/posts/my-year-of-riding-danishly/#models), so no need to repeat that code here. But I do show the code for the scatterplots and gt tables below\n\nThe code for the scatterplots is below, and gt tables to help explain the time and kilojoules residual plots will sit next to the tables. The code for the gt tables is after the graphics.\n\nWhen you look at the results, remember that a residual is the actual observation minus the predicted observation. Thus a positive residual means the model under-predicted the outcome, and a negative residual means the model over-predicted the outcome.\n\nAlso, if you want to see the plots in a bigger image, click on the plot...I have lightbox enabled on the site for easier graphic viewing if desired.\n\n<!---load data and do regression datasets quietly--->\n\n\n\n\n\n::: {layout-ncol=\"2\"}\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll  code-fold=\"true\" code-summary=\"Show code for scatterplot\"}\n## time model\nride_models_time_df %>%\n\tggplot(aes(x=moving_time_hms_dtm, y=moving_time_resid_hms)) +\n\tgeom_point() +\n\tgeom_smooth() +\n\tscale_x_datetime(breaks = scales::breaks_width(\"15 min\"),labels=scales::date_format(\"%H:%M\")) +\n\tlabs(title = \"Slight under-prediction of ride-time for rides of fewer than 30 minutes\",\n\t\t\t subtitle = \"*Residual = Actual - Predicted; >0 = under-prediction, <0 = over-prediction*\",\n\t\tx = \"Moving time - actual (H/M/S)\", y = \"Moving time - residual (H/M/S)\") +\n\ttheme_minimal() +\n\ttheme(panel.grid.minor = element_blank(),\n\t\tplot.title = element_text(hjust = 0.5, size = 12),\n\t\t\t\tplot.subtitle = element_markdown(),\n\t\t\t\taxis.text.x = element_markdown()) \n#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n::: {.cell-output-display}\n![](images/residtime-1.png){width=100%}\n:::\n:::\n\n\n![](images/resid_time_table.png)\n:::\n\nWhat struck me when looking at the scatterplot was the hitch in the smoothing line at about 10-minute ride length. The model went from over-predicting to almost being eactly equal to the actual. To get a better sense of things I grouped the rides into four buckets and looked at the average residual. For rides under 15 minutes the model was over-predicting by seven seconds, noise essentially. For rides between 15-30 minutes the model was off by 32 seconds. The largest deviance was under-predicting the longer rides, those of 1+ hours.\n\n::: {layout-ncol=\"2\"}\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll  code-fold=\"true\" code-summary=\"Show code for scatterplot\"}\n## kilojoules model\nride_models_kjoules_df %>%\n\tggplot(aes(x=kilojoules, y=kjoules_resid)) +\n\tgeom_point() +\n\tgeom_smooth() +\n\tlabs(title = \"Model starts to under-predict at ~125; slight over-prediction until then\",\n\t\t\t subtitle = \"*Residual = Actual - Predicted; >0 = under-prediction, <0 = over-prediction*\",\n\t\t\t x = \"Kilojoules - actual\", y = \"Kilojoules - residual\") +\n\ttheme_minimal() +\n\ttheme(panel.grid.minor = element_blank(),\n\t\t\t\tplot.title = element_text(hjust = 0.5, size = 12),\n\t\t\t\tplot.subtitle = element_markdown(),\n\t\t\t\taxis.text.x = element_markdown())\n#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n::: {.cell-output-display}\n![](images/residkjoule-1.png){width=100%}\n:::\n:::\n\n\n![](images/resid_kjoule_table.png)\n:::\n\nFor the kilojoules model there was also a hitch in the smoothing line at around 125 actual kilojoues. So again I put the rides into groups to see where the model was most sensitive. We can see that when I expended under 125 kilojoues the model was minimally over-prediccting. But at 126 to 500 the model under-predicted how much energy I would burn.\n\n::: {layout-ncol=\"2\"}\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll  code-fold=\"true\" code-summary=\"Show code for scatterplot\"}\n\n## watts model\nride_models_watts_df %>%\n\tggplot(aes(x=average_watts, y=watts_resid)) +\n\tgeom_point() +\n\tgeom_smooth() +\n\tlabs(title = \"Model over-predicts for output to ~140, then starts to under-predict\",\n\t\t\t subtitle = \"*Residual = Actual - Predicted; >0 = under-prediction, <0 = over-prediction*\",\n\t\t\t x = \"Watts - actual\", y = \"Watts - residual\") +\n\ttheme_minimal() +\n\ttheme(panel.grid.minor = element_blank(),\n\t\t\t\tplot.title = element_text(hjust = 0.5, size = 12),\n\t\t\t\tplot.subtitle = element_markdown(),\n\t\t\t\taxis.text.x = element_markdown())\n#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n::: {.cell-output-display}\n![](images/residwatts-1.png){width=100%}\n:::\n:::\n\n\nFor the watts model, the smoothing line was fairly, uh, smooth. So no need to dig too deeply. The model seemed to do alright predicting how much power I could generate.\n:::\n\nCode for the gt tables is here if you want to see it.\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll  code-fold=\"true\" code-summary=\"Show code for gt tables\"}\nride_models_time_df %>%\n\tgroup_by(ride_time_grp) %>%\n\tsummarise(rides_n = n(),\n\t\tresidual_mean = mean(moving_time_resid)) %>%\n\tmutate(residual_mean = hms::hms(residual_mean)) %>%\n\tmutate(residual_mean = hms::round_hms(residual_mean, digits = 0)) %>%\n\tgt() %>%\n\tcols_label(ride_time_grp = \"Ride-Time Group\", rides_n = \"# of Rides\",\n\t\t\t\t\t\t residual_mean = md(\"Avg Residual<br>*(H/M/S)*\")) %>%\n\tcols_align(align = \"left\", columns = ride_time_grp) %>%\n\tcols_align(align = \"right\", columns = residual_mean) %>%\n\ttab_style(style = cell_fill(color = \"lightgrey\"), locations = cells_body(rows = c(2, 4))) %>%\n\ttab_header(title = md(\"*Average Residual Ride Time by Ride Time Group*\"),\n\t\t\t\t\t\t subtitle = md(\"*Residual = Actual - Predicted; >0 = under-prediction, <0 = over-prediction*\")) %>% \n\tgtsave(\"images/resid_time_table.png\")\n\nride_models_kjoules_df %>%\n\tgroup_by(kjoule_grp) %>%\n\tsummarise(rides_n = n(),\n\t\t\t\t\t\tresidual_mean = mean(kjoules_resid)) %>%\n\tgt() %>%\n\tcols_label(kjoule_grp = \"Kilojoule Group\", rides_n = \"# of Rides\",\n\t\t\t\t\t\t residual_mean = md(\"Avg Residual\")) %>%\n\tcols_align(align = \"left\", columns = kjoule_grp) %>%\n\tcols_align(align = \"right\", columns = residual_mean) %>%\n\ttab_style(style = cell_fill(color = \"lightgrey\"), locations = cells_body(rows = c(2, 4))) %>%\n\ttab_header(title = md(\"*Average Residual Kilojoules by Kilojoule Group*\"),\n\t\t\t\t\t\t subtitle = md(\"*Residual = Actual - Predicted; >0 = under-prediction, <0 = over-prediction*\")) %>% \n\tgtsave(\"images/resid_kjoule_table.png\")\n\n```\n:::\n\n\nNow let's look at the number of unique days ridden. I took some inspiration from [Ryan Hart's post](https://bsky.app/profile/ryanahart.bsky.social/post/3ki4c72pw5426) that initially clued me into the `rstrava` app. He did a take on the github profile plot that shows how many days in a 12-month period you pushed commits, with darker coloring for more commits in a day.\n\nI used most of [his code](https://github.com/curatedmess/TidyTuesday/blob/main/2024/01022024/runs_2024.R), streamlining a few things, like creating fewer dataframes and calling on the main dataframe to populate text and legends.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code for setting up the data\"}\n# subset the main dataset\nridedates1 <- strava_data %>%\n\tfilter(activity_year == 2023) %>%\n\tgroup_by(activity_date_p) %>%\n\tmutate(rides_day = n()) %>%\n\tungroup() %>%\n\tselect(distance_km, year = activity_year, month = activity_month_t, \n\t\tday = activity_wday, date = activity_date_p, rides_day)\n\n# create 365 day date scaffold \nscaffold_df <- \n\tdata.frame(date = date(seq(from = as.Date(\"2023-01-01\"), \n\t\t\t\t\t\tto = as.Date(\"2023-12-31\"), by = 1)))\n\n# join rides with date scaffold to show all days of the year and \n# add colors for fill based on km / day value\nridedates <- full_join(ridedates1, scaffold_df) %>%\n\tmutate(distance_km = ifelse(is.na(distance_km), 0, distance_km)) %>%\n\tmutate(rides_day = ifelse(is.na(rides_day), 0, rides_day)) %>%\n\tgroup_by(date) %>%\n\tmutate(distance_day = sum(distance_km)) %>%\n\tdistinct(date, .keep_all = TRUE) %>%\n\tungroup() %>%\n\tmutate(color = case_when(distance_day == 0 ~ \"#171c22\",\n\t\t\t\t\tdistance_day > 0 & distance_day <= 4.5 ~ \"#0E4429\",\n\t\t\t\t\tdistance_day > 4.5 & distance_day <= 10 ~ \"#006D32\",\n\t\t\t\t\tdistance_day > 10 & distance_day <= 20 ~ \"#26A642\",\n\t\t\t\t\tdistance_day > 20 ~ \"#39D354\")) %>%\n\tselect(date, distance_day, rides_day, color)\n\n# for grid\nstart_day <- as.Date(\"2023-01-01\")\nend_day <- as.Date(\"2023-12-31\")\n\n# create main set for plotting the grid\ndf_grid <- tibble(date = seq(start_day, end_day, by = \"1 day\")) %>%\n\tmutate(year = year(date),\n\t\t\tmonth_abb = month(date, label = TRUE, abbr = TRUE),\n\t\t\tday = wday(date, label = TRUE),\n\t\t\tfirst_day_of_year = floor_date(date, \"year\"),\n\t\t\tweek_of_year = as.integer((date - first_day_of_year + wday(first_day_of_year) - 1) / 7) + 1) %>%\n\tleft_join(ridedates) %>%\n\tarrange(date) %>%\n\tmutate(num = row_number()) %>%\n\tmutate(day = as.character(day)) %>%\n\tmutate(day = factor(day, levels = c(\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"))) %>%\n\tmutate(distance_year = round(sum(distance_day), 0)) %>%\n\tmutate(rides_year = sum(rides_day)) %>%\n\tmutate(ride_day = ifelse(rides_day > 0, 1, 0)) %>%\n\tmutate(ride_days_unique = sum(ride_day)) %>%\n\tmutate(pct_days_ridden = round((ride_days_unique / 365) * 100, 1)) %>%\n\tselect(-ride_day)\n\ndf_labels <- df_grid %>%\n\tgroup_by(month_abb) %>%\n\tarrange(date) %>%\n\tfilter(week_of_year == 1 | day == \"Sun\") %>%\n\tslice(1)\n\n# legend colors and text objects \ndf_legend <- data.frame(y = c(-1, -1, -1, -1, -1),\n\t\t\tx = c(44, 45, 46, 47, 48),\n\t\t\tcolor = c(\"#171c22\", \"#0E4429\", \"#006D32\", \"#26A642\", \"#39D354\"))\n\ndf_legend_labels <- data.frame(y = c(-1, -1),\n\t\t\tx = c(43, 49),\n\t\t\tlabel = c(\"Fewer km (black = 0)\", \"More km\"),\n\t\t\thjust = c(1, 0))\n\ndf_legend <- data.frame(y = c(-1, -1, -1, -1, -1),\n\t\t\tx = c(44, 45, 46, 47, 48),\n\t\t\tcolor = c(\"#171c22\", \"#0E4429\", \"#006D32\", \"#26A642\", \"#39D354\"))\n```\n:::\n\n\nNow that the data is sorted, let's make a plot\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll  code-fold=\"true\" code-summary=\"Show code for scatterplot\"}\nggplot() +\n\tstatebins:::geom_rtile(data = df_grid,\n\t\t\taes(y = fct_rev(day), x = week_of_year, fill = color), radius = unit(1.75, \"pt\"),\n\t\t\tcolor = \"white\", size = 1) +\n\tstatebins:::geom_rtile(data = df_legend,\n\t\t\taes(y = y, x = x, fill = color),\n\t\t\tradius = unit(1.75, \"pt\"), color = \"#FFFFFF\", size = 1) +\n\tgeom_text(data = df_labels, aes(x = week_of_year, y = 8, label = month_abb),\n\t\t\thjust = 0.3, color = \"#848d97\", size = 3, check_overlap = TRUE) +\n\tgeom_text(data = df_grid, aes(x = -1.9, y = day, label = day),\n\t\t\tcolor = \"#848d97\", size = 3, hjust = 0, check_overlap = TRUE) +\n\tgeom_text(data = df_legend_labels, aes(x, y, label = label, hjust = hjust),\n\t\t\tcolor = \"#848d97\", size = 3) +\n\tgeom_text(data = df_grid,\n\t\t\taes(x = 0, y = -1, \n\t\t\tlabel = paste0(\"Total kilometers ridden = \", scales::comma(distance_year))),\n\t\t\tcolor = \"#848d97\", size = 4, hjust = 0) +\n\tscale_y_discrete(breaks = c(\"Mon\", \"Wed\", \"Fri\")) +\n\texpand_limits(y = c(-2, 9)) +\n\tscale_x_continuous(expand = c(-2, NA)) +\n\tscale_fill_identity() +\n\tlabs(\n\t\ttitle = glue::glue(\"{df_grid$rides_year}\", \" rides this year on {df_grid$ride_days_unique} unique days, or {df_grid$pct_days_ridden} % of all days\"),\n\t\tsubtitle = \"Black square = no ride that day\",\n\t\tcaption = \"Strava data via rstrava app & Strava API\") +\n#\tcoord_equal() +\n\ttheme_void() +\n\ttheme(plot.title = element_text(size = 18, vjust = -6, color = \"#848d97\"),\n\t\t\tplot.title.position = \"plot\",\n\t\t\tplot.subtitle = element_text(size = 14, vjust = -7, \n\t\t\t\t\tcolor = \"#848d97\", margin = margin(t = 8, b = 10)),\n\t\t\tplot.caption.position = \"plot\",\n\t\t\tplot.caption = element_text(size = 9, color = \"#848d97\", vjust = 10,\n\t\t\t\t\thjust = .9, margin = margin(t = 25)),\n\t\t\tlegend.position = \"none\",\n\t\t\tplot.margin = unit(c(0.5, 1, 0.5, 1), \"cm\"),\n\t\t\tplot.background = element_rect(color = NA, fill = \"#FFFFFF\"))\n```\n\n::: {.cell-output-display}\n![](images/unnamed-chunk-3-1.png){width=100%}\n:::\n:::\n\n\nThere you have it...206 unique days of riding, which is 56% of the year. I won't come close to matching that this year, but hopefully in 2025, when I'm fully healed.\n\nPossible next steps for the this data could be comparing Denmark and California rides, using the gpx files to create my own maps...who knows. Hope this and the original post were an inpsiration on how to leverage data you create to tell a story.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}