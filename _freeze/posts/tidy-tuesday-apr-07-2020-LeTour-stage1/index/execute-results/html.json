{
  "hash": "a82df0c77fcf53a72735769ebe275570",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidy Tuesday, April 07, 2020 - Le Tour! (Stage 1, cleaning the data)\"\ndescription: \"A mountain of data about the Tour de France\"\nauthor: \"gregers kjerulf dubrow\"\ndate: '2020-11-30'\ncategories: [post, tidytuesday, rstats, sports, cycling, tour de france]\nimage: \"Kraftwerk_Tour_De_France_Soundtracks_album_cover.png\"\ntoc: true\neditor: \n  mode: source\n---\n\n\n![](Kraftwerk_Tour_De_France_Soundtracks_album_cover.png) \\| ![](bike_twinpeaks.jpg){width=\"49%\"}\n\n## Introduction\n\nHaving looked at [hiking trails in Washington state](https://www.gregdubrow.io/posts/tidy-tuesday-nov-11-2020-hiking-trails-in-wash-state/) and [bridges in Maryland](https://www.gregdubrow.io/posts/tidy-tuesday-maryland-bridges/) I poked around the [#TidyTuesday repo](https://github.com/rfordatascience/tidytuesday) and saw this [trove of data](https://github.com/rfordatascience/tidytuesday/tree/master/data/2020/2020-04-07) from back in April on [The Tour de France](https://www.letour.fr/en/). I love this race, I cycle for exercise, and I love the Kraftwerk album, so of course I had to dig in.\n\nSo I don't bury the lede, this is a two-part post. Why? Because there was a lot of data munging & cleaning needed to get the data into shape for what I wanted to do. So this post is all about what I needed to do on that end. The analysis post will come soon. Also, I'm trying to work out how to do a code show/hide thing in hugo academic so bear with me that the code takes up lots of pixels.\n\n*(update - migrating to 'Quarto' means a native code-fold feature...hooray!)*\n\nSo let's dig in...first we'll load packages and create a '%notin% operator...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidytuesdayR) # to load tidytuesday data\nlibrary(tidyverse) # to do tidyverse things\nlibrary(tidylog) # to get a log of what's happening to the data\nlibrary(tdf) # to get original stage results file\n\n# create notin operator to help with cleaning & analysis\n`%notin%` <- negate(`%in%`)\n```\n:::\n\n\n## Getting the Data & Initial Cleaning {#data1}\n\nThere's a ton of data here, sourced from the [`tdf` package from Alastair Rushworth](https://github.com/alastairrushworth/tdf) and (Thomas Camminady's data set) (https://github.com/camminady/LeTourDataSet), via [Kaggle](https://www.kaggle.com/jaminliu/a-brief-tour-of-tour-de-france-in-numbers/)\n\nThere are three distinct sets to work thru, each going back to the first run of the race in 1903:\\\n- A dataframe of overall ([General Classification, or Yellow Jersey / *maillot jaune*](https://en.wikipedia.org/wiki/General_classification_in_the_Tour_de_France)) winners from 1903 to 2019 comes from the Tidy Tuesday frame.\\\n- A dataframe with stage winners for races 1903 to 2017, also in the Tidy Tuesday set, sourced from Kaggle.\\\n- A frame of overall stage results, sourced from the `tdf` pacakge due to issues with date conversion in the data included in the Tidy Tuesday set.\n\nThe stage winner set needs a bit of mungung...I created a stage_results_id column similar to the one in the stage results set. But it needs leading zeros for stages 1-9 so it sorts properly.\n\nI then got it in my head I wanted results through 2020, so I grabbed them from wikipedia; but the hard way, with copy-paste since my scraping skills aren't there & I just wanted it done. Data is uploaded to my [github repo](https://github.com/greg-dubrow/tidy-tuesday-projects/tree/master/2020/tt_2020-04-07_letour/data) if you want to use it. (yes, it's in an excel file...)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show tdf data cleaning pt1\"}\n# load main file from tt repo\ntt_tdf <- tidytuesdayR::tt_load('2020-04-07')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tDownloading file 1 of 3: `stage_data.csv`\n\tDownloading file 2 of 3: `tdf_stages.csv`\n\tDownloading file 3 of 3: `tdf_winners.csv`\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show tdf data cleaning pt1\"}\n# create race winners set. comes from tdf package. includes up to 2019\ntdf_winners <- as_tibble(tt_tdf$tdf_winners)\n\n# create stage winner set. in tt file, comes from kaggle, includes up to 2017\ntdf_stagewin1 <- tt_tdf$tdf_stages %>%\n  mutate_if(is.character, str_trim)\n  \n# pulled 2018 - 2020 from wikipedia\n# read in excel - need to separate route field to Origin & Destination\ntdf_stagewin2 <- readxl::read_excel(\"data/tdf_stagewinners_2018-20.xlsx\") %>%\n  mutate(Stage = as.character(Stage)) %>%\n  mutate(Date = lubridate::as_date(Date)) %>% \n  separate(Course, c(\"Origin\", \"Destination\"), \"to\", extra = \"merge\") %>%\n  mutate_if(is.character, str_trim) %>%\n  select(Stage, Date, Distance, Origin, Destination, Type, Winner, Winner_Country = Winner_country)\n\n# join with rbind (since I made sure to put 2018-2020 data in same shape as tt set)\n# clean up a bit\ntdf_stagewin <- rbind(tdf_stagewin1, tdf_stagewin2) %>%\n  mutate(race_year = lubridate::year(Date)) %>% \n  mutate(Stage = ifelse(Stage == \"P\", \"0\", Stage)) %>%\n  mutate(stage_ltr = case_when(str_detect(Stage, \"a\") ~ \"a\",\n                               str_detect(Stage, \"b\") ~ \"b\",\n                               str_detect(Stage, \"c\") ~ \"c\",\n                               TRUE ~ \"\")) %>%\n  mutate(stage_num = str_remove_all(Stage, \"[abc]\")) %>%\n  mutate(stage_num = stringr::str_pad(stage_num, 2, side = \"left\", pad = 0)) %>% \n  mutate(stage_results_id = paste0(\"stage-\", stage_num, stage_ltr)) %>%\n  mutate(split_stage = ifelse(stage_ltr %in% c(\"a\", \"b\", \"c\"), \"yes\", \"no\")) %>%\n  \n  # extract first and last names from winner field\n  mutate(winner_first = str_match(Winner, \"(^.+)\\\\s\")[, 2]) %>%\n  mutate(winner_last= gsub(\".* \", \"\", Winner)) %>%\n\n  # clean up stage types, collapse into fewer groups\n  mutate(stage_type = case_when(Type %in% c(\"Flat cobblestone stage\", \"Flat stage\", \"Flat\",\n                                            \"Flat Stage\", \"Hilly stage\", \"Plain stage\", \n                                            \"Plain stage with cobblestones\") \n                                ~ \"Flat / Plain / Hilly\",\n                                Type %in% c(\"High mountain stage\", \"Medium mountain stage\",\n                                            \"Mountain stage\", \"Mountain Stage\", \"Stage with mountain\",\n                                            \"Stage with mountain(s)\", \"Transition stage\")\n                                ~ \"Mountain\",\n                                Type %in% c(\"Individual time trial\", \"Mountain time trial\") \n                                ~ \"Time Trail - Indiv\",\n                                Type == \"Team time trial\" ~ \"Time Trail - Team\",\n                                TRUE ~ \"Other\")) %>% \n  mutate_if(is.character, str_trim) %>%\n  arrange(desc(race_year), stage_results_id) %>%\n  select(race_year, stage_results_id, stage_date = Date, stage_type, Type, split_stage,\n         Origin, Destination, Distance, Winner, winner_first, winner_last,\n         Winner_Country, everything())\n\n# take a look at this awesome dataset\nglimpse(tdf_stagewin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,299\nColumns: 16\n$ race_year        <dbl> 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020,…\n$ stage_results_id <chr> \"stage-01\", \"stage-02\", \"stage-03\", \"stage-04\", \"stag…\n$ stage_date       <date> 2020-08-29, 2020-08-30, 2020-08-31, 2020-09-01, 2020…\n$ stage_type       <chr> \"Flat / Plain / Hilly\", \"Mountain\", \"Flat / Plain / H…\n$ Type             <chr> \"Flat stage\", \"Medium mountain stage\", \"Flat stage\", …\n$ split_stage      <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\",…\n$ Origin           <chr> \"Nice\", \"Nice\", \"Nice\", \"Sisteron\", \"Gap\", \"Le Teil\",…\n$ Destination      <chr> \"Nice\", \"Nice\", \"Sisteron\", \"Orcières-Merlette\", \"Pri…\n$ Distance         <dbl> 156.0, 186.0, 198.0, 160.5, 183.0, 191.0, 168.0, 141.…\n$ Winner           <chr> \"Alexander Kristoff\", \"Julian Alaphilippe\", \"Caleb Ew…\n$ winner_first     <chr> \"Alexander\", \"Julian\", \"Caleb\", \"Primož\", \"Wout van\",…\n$ winner_last      <chr> \"Kristoff\", \"Alaphilippe\", \"Ewan\", \"Roglič\", \"Aert\", …\n$ Winner_Country   <chr> \"NOR\", \"FRA\", \"AUS\", \"SLO\", \"BEL\", \"KAZ\", \"BEL\", \"FRA…\n$ Stage            <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"1…\n$ stage_ltr        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ stage_num        <chr> \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\",…\n```\n\n\n:::\n:::\n\n\n## More Data Cleaning {#data2}\n\nStage data in CSV from the tidy tuesday repository seems to have truncated the times, leaving only the seconds in a character field. To get complete results we need to pull from `tdf` package using the cleaning script from the Tidy Tuesday page. Some operations will take a while, so best to run as a background job if you want to do something else while it runs. Or go get a cup of coffee.\n\nIn terms of cleaning:\\\n- The stage_results_id & rank fields needs leading zeros.\\\n- The rank field needs a bit of clean-up to fix the 1000s codes.\\\n- Since rider names were last-first, I wanted to separate out first and last, and also make a field with the full name, but first name in front. Stackoverlflow was my regex friend here.\\\n- Other minor fixes\n\nIn the process of cleaning and comparing to the stage winners set, I noticed there were some problems in years where individual stages were split into 2 or 3 legs (A, B & C). Either while it was scraped or combined, the A leg results ended up repeating to the B leg, and in some cases the C leg wasn't reported. I put it in as an issue in the github repo. But that shouldn't take away from what's an amazing dataset to work with. In the analysis section I'll work around the problems with those stages.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show tdf data cleaning pt2\"}\nall_years <- tdf::editions %>%\n  unnest_longer(stage_results) %>%\n  mutate(stage_results = map(stage_results, ~ mutate(.x, rank = as.character(rank)))) %>%\n  unnest_longer(stage_results)\n\nstage_all <- all_years %>%\n  select(stage_results) %>%\n  flatten_df()\n\ncombo_df <- bind_cols(all_years, stage_all) %>%\n  select(-stage_results)\n\ntdf_stagedata <- as_tibble(combo_df %>%\n  select(edition, start_date,stage_results_id:last_col()) %>%\n  mutate(race_year = lubridate::year(start_date)) %>%\n  rename(age = age...25) %>%\n\n  # to add leading 0 to stage, extract num, create letter, add 0s to num, paste\n  mutate(stage_num = str_replace(stage_results_id, \"stage-\", \"\")) %>%\n  mutate(stage_ltr = case_when(str_detect(stage_num, \"a\") ~ \"a\",\n                               str_detect(stage_num, \"b\") ~ \"b\",\n                               TRUE ~ \"\"))) %>%\n  mutate(stage_num = str_remove_all(stage_num, \"[ab]\")) %>%\n  mutate(stage_num = stringr::str_pad(stage_num, 2, side = \"left\", pad = 0)) %>%\n  mutate(stage_results_id2 = paste0(\"stage-\", stage_num, stage_ltr)) %>%\n  mutate(split_stage = ifelse(stage_ltr %in% c(\"a\", \"b\"), \"yes\", \"no\")) %>%\n\n  # fix 1000s rank. change to DNF\n  mutate(rank = ifelse(rank %in% c(\"1003\", \"1005\", \"1006\"), \"DNF\", rank)) %>%\n  mutate(rank2 = ifelse(rank %notin% c(\"DF\", \"DNF\", \"DNS\", \"DSQ\",\"NQ\",\"OTL\"),\n                        stringr::str_pad(rank, 3, side = \"left\", pad = 0), rank)) %>%\n\n  # extract first and last names from rider field\n  mutate(rider_last = str_match(rider, \"(^.+)\\\\s\")[, 2]) %>%\n  mutate(rider_first= gsub(\".* \", \"\", rider)) %>%\n  mutate(rider_firstlast = paste0(rider_first, \" \", rider_last)) %>%\n  select(-stage_results_id, -start_date, ) %>%\n\n  # fix 1967 & 1968\n  mutate(stage_results_id2 = ifelse((race_year %in% c(1967, 1968) & stage_results_id2 == \"stage-00\"),\n         \"stage-01a\", stage_results_id2)) %>%\n  mutate(stage_results_id2 = ifelse((race_year %in% c(1967, 1968) & stage_results_id2 == \"stage-01\"),\n         \"stage-01b\", stage_results_id2)) %>%\n  mutate(split_stage = ifelse((race_year %in% c(1967, 1968) &\n                                 stage_results_id2 %in% c(\"stage-01a\", \"stage-01b\")),\n                              \"yes\", split_stage)) %>%\n\n  select(edition, race_year, stage_results_id = stage_results_id2, split_stage,\n         rider, rider_first, rider_last, rider_firstlast, rank2,\n         time, elapsed, points, bib_number, team, age, everything())\n\nsaveRDS(tdf_stagedata, \"data/tdf_stagedata.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntdf_stagedata <- readRDS(\"data/tdf_stagedata.rds\")\nglimpse(tdf_stagedata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 255,752\nColumns: 18\n$ edition          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ race_year        <dbl> 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903,…\n$ stage_results_id <chr> \"stage-01\", \"stage-01\", \"stage-01\", \"stage-01\", \"stag…\n$ split_stage      <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\",…\n$ rider            <chr> \"Garin Maurice\", \"Pagie Émile\", \"Georget Léon\", \"Auge…\n$ rider_first      <chr> \"Maurice\", \"Émile\", \"Léon\", \"Fernand\", \"Jean\", \"Marce…\n$ rider_last       <chr> \"Garin\", \"Pagie\", \"Georget\", \"Augereau\", \"Fischer\", \"…\n$ rider_firstlast  <chr> \"Maurice Garin\", \"Émile Pagie\", \"Léon Georget\", \"Fern…\n$ rank2            <chr> \"001\", \"002\", \"003\", \"004\", \"005\", \"006\", \"007\", \"008…\n$ time             <Period> 17H 45M 13S, 55S, 34M 59S, 1H 2M 48S, 1H 4M 53S, 1…\n$ elapsed          <Period> 17H 45M 13S, 17H 46M 8S, 18H 20M 12S, 18H 48M 1S, …\n$ points           <int> 100, 70, 50, 40, 32, 26, 22, 18, 14, 10, 8, 6, 4, 2, …\n$ bib_number       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ team             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ age              <int> 32, 32, 23, 20, 36, 37, 25, 33, NA, 22, 26, 28, 21, 2…\n$ rank             <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"1…\n$ stage_num        <chr> \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\",…\n$ stage_ltr        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n```\n\n\n:::\n:::\n\n\n## What's Next {#next}\n\nPoking around the Kaggle site referenced above I found [these datasets](https://github.com/thomascamminady/LeTourDataSet/tree/master) of final results for all riders in all races since 1903. A few different fields than in the tidy tuesday winners set.\n\nNow this is a ton of data to work with, and I won't use it all. Figured I'd include the code to get it all in case you get inspired to grab it and take a look.\n\nOk...that's it for cleaning & prepping...charts and tables in [Stage 2](https://www.gregdubrow.io/posts/tidy-tuesday-apr-07-2020-letour-stage2/).\n\n*This post was last updated on 2024-02-20*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}